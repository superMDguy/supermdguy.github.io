<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on My Homepage</title><link>https://superMDguy.github.io/post/</link><description>Recent content in Posts on My Homepage</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 10 Oct 2018 00:01:46 +0000</lastBuildDate><atom:link href="https://superMDguy.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>A solution to async boilerplate in JavaScript ✨</title><link>https://superMDguy.github.io/post/2018-10-10_solution-to-async-boilerplate-in-javascript-/</link><pubDate>Wed, 10 Oct 2018 00:01:46 +0000</pubDate><guid>https://superMDguy.github.io/post/2018-10-10_solution-to-async-boilerplate-in-javascript-/</guid><description>Source
Have you ever written code that looks like this?
function loadStuff() { state.loading = true; fetch(&amp;#34;//myapi.com/stuff&amp;#34;) .then((res) =&amp;gt; res.json()) .then((data) =&amp;gt; { state.loading = false; state.stuff = data; }); } Maybe you also have error handling or a fancy delayed spinner that adds even more complexity. Writing the same code for every single async task in your project can add a lot of boilerplate, especially if you have a lot of HTTP requests in your application.</description></item><item><title>How to Build Your Own Reactivity System</title><link>https://superMDguy.github.io/post/2017-11-09_how-to-build-your-own-reactivity-system/</link><pubDate>Thu, 09 Nov 2017 22:14:34 +0000</pubDate><guid>https://superMDguy.github.io/post/2017-11-09_how-to-build-your-own-reactivity-system/</guid><description>A couple of months ago, I attended an in-person meetup at Frontend Masters called Vue.js Advanced Features from the Ground Up. It was really awesome because we got to learn about Vue.js from its creator, Evan You. Instead of just teaching us how to use Vue, he showed us how to actually implement a few parts of it. Reactivity was the part that interested me the most, so, after the class, I dug into Vue’s source code to learn more about exactly how its reactivity system works.</description></item><item><title>How to control bootstrap’s css</title><link>https://superMDguy.github.io/post/2017-08-10_how-to-control-bootstraps-css/</link><pubDate>Thu, 10 Aug 2017 17:05:43 +0000</pubDate><guid>https://superMDguy.github.io/post/2017-08-10_how-to-control-bootstraps-css/</guid><description>Source: https://teckstack.com
In our Angular 4 project, we’re using a datepicker from ng-bootstrap. It has a lot of features (such as date ranges, minimum/maximum date validation, etc.) that are really useful to us. The only issue? As you can probably tell from the name, it uses bootstrap.
Bootstrap works great when it’s used to style an entire app. But as soon as we included it in our app, it changed a ton of our styling.</description></item></channel></rss>